{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "VPC: public and private subnets in two availability zones with an RDS database, based on a cloudonaut.io template. The template has been modified, but the original cloudonaut copy is available at https://github.com/widdix/aws-cf-templates/blob/master/vpc/vpc-2azs.json",
    "Parameters": {
        "DBUser": {
            "Description": "User for RDS",
            "Type": "String",
            "Default": "django"
        },
        "DBPassword": {
            "Description": "Password for RDS database",
            "Type": "String",
            "MinLength": "12",
            "Default": "SET A PASSWORD"
        },
        "ClassB": {
            "Description": "Class B of VPC (10.XXX.0.0/16)",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "3",
            "Default": "10"
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".0.0/16"]]},
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "InstanceTenancy": "default",
                "Tags": [{
                    "Key": "Name",
                    "Value": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".0.0/16"]]}
                }]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".0.0/16"]]}
                }]
            }
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "InternetGatewayId": {"Ref": "InternetGateway"}
            }
        },
        "NatGatewayA": {
            "DependsOn": ["VPCGatewayAttachment"],
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {"Fn::GetAtt": ["NatEIPA", "AllocationId"]},
                "SubnetId": {"Ref": "SubnetAPublic"}
            }
        },
        "NatGatewayB": {
            "DependsOn": ["VPCGatewayAttachment"],
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {"Fn::GetAtt": ["NatEIPB", "AllocationId"]},
                "SubnetId": {"Ref": "SubnetBPublic"}
            }
        },
        "NatEIPA": {
            "DependsOn": ["VPCGatewayAttachment"],
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatEIPB": {
            "DependsOn": ["VPCGatewayAttachment"],
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Open database for access",
                "VpcId": {"Ref": "VPC"},
                "SecurityGroupIngress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : "5432",
                    "ToPort" : "5432",
                    "SourceSecurityGroupId" : { "Ref" : "LambdaExecSecurityGroup" }
                },
                {
                    "IpProtocol" : "tcp",
                    "FromPort" : "5432",
                    "ToPort" : "5432",
                    "SourceSecurityGroupId" : { "Ref" : "SshSecurityGroup" }
                }]
            }
        },
        "LambdaExecSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Lambda functions execute with this group",
                "VpcId": {"Ref": "VPC"}
            }
        },
        "SshSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "sshable instance w/ db access",
                "VpcId": {"Ref": "VPC"},
                "SecurityGroupIngress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : "22",
                    "ToPort" : "22",
                    "CidrIp" : "0.0.0.0/0"
                }]
            }
        },
        "DBInstance" : {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName"            : "britecoretestdb",
                "Engine"            : "postgres",
                "MultiAZ"           : false,
                "MasterUsername"    : { "Ref" : "DBUser" },
                "DBInstanceClass"   : "db.t2.micro",
                "AllocatedStorage"  : 5,
                "MasterUserPassword": { "Ref" : "DBPassword" },
                "VPCSecurityGroups" : [{"Fn::GetAtt": ["DBSecurityGroup", "GroupId"]}],
                "DBSubnetGroupName" : {"Ref": "DbSubnetGroup"}
            }
        },
        "DbSubnetGroup": {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnets for RDS db instance",
                "SubnetIds": [{"Ref": "SubnetAPrivate"}, {"Ref": "SubnetBPrivate"}]
            }
        },
        "SubnetAPublic": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
                "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".0.0/20"]]},
                "MapPublicIpOnLaunch": true,
                "VpcId": {"Ref": "VPC"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "A public"
                }, {
                "Key": "Reach",
                "Value": "public"
                }]
            }
        },
        "SubnetAPrivate": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
                "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".16.0/20"]]},
                "VpcId": {"Ref": "VPC"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "A private"
                }, {
                "Key": "Reach",
                "Value": "private"
                }]
            }
        },
        "SubnetBPublic": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
                "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".32.0/20"]]},
                "MapPublicIpOnLaunch": true,
                "VpcId": {"Ref": "VPC"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "B public"
                }, {
                "Key": "Reach",
                "Value": "public"
                }]
            }
        },
        "SubnetBPrivate": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
                "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".48.0/20"]]},
                "VpcId": {"Ref": "VPC"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "B private"
                }, {
                "Key": "Reach",
                "Value": "private"
                }]
            }
        },
        "RouteTablePublic": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "Public"
                }]
            }
        },
        "RouteTablePrivateA": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private"
                }]
            }
        },
        "RouteTablePrivateB": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private"
                }]
            }
        },
        "RouteTableAssociationAPublic": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "SubnetAPublic"},
                "RouteTableId": {"Ref": "RouteTablePublic"}
            }
        },
        "RouteTableAssociationAPrivate": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "SubnetAPrivate"},
                "RouteTableId": {"Ref": "RouteTablePrivateA"}
            }
        },
        "RouteTableAssociationBPublic": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "SubnetBPublic"},
                "RouteTableId": {"Ref": "RouteTablePublic"}
            }
        },
        "RouteTableAssociationBPrivate": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "SubnetBPrivate"},
                "RouteTableId": {"Ref": "RouteTablePrivateB"}
            }
        },
        "RouteTablePrivateNatGatewayA": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "VPCGatewayAttachment",
            "Properties": {
                "RouteTableId": {"Ref": "RouteTablePrivateA"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {"Ref": "NatGatewayA"}
            }
        },
        "RouteTablePrivateNatGatewayB": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "VPCGatewayAttachment",
            "Properties": {
                "RouteTableId": {"Ref": "RouteTablePrivateB"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {"Ref": "NatGatewayB"}
            }
        },
        "RouteTablePublicInternetRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "VPCGatewayAttachment",
            "Properties": {
                "RouteTableId": {"Ref": "RouteTablePublic"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {"Ref": "InternetGateway"}
            }
        },
        "NetworkAclPublic": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "Public"
                }]
            }
        },
        "NetworkAclPrivate": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private"
                }]
            }
        },
        "SubnetNetworkAclAssociationAPublic": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {"Ref": "SubnetAPublic"},
                "NetworkAclId": {"Ref": "NetworkAclPublic"}
            }
        },
        "SubnetNetworkAclAssociationAPrivate": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {"Ref": "SubnetAPrivate"},
                "NetworkAclId": {"Ref": "NetworkAclPrivate"}
            }
        },
        "SubnetNetworkAclAssociationBPublic": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {"Ref": "SubnetBPublic"},
                "NetworkAclId": {"Ref": "NetworkAclPublic"}
            }
        },
        "SubnetNetworkAclAssociationBPrivate": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {"Ref": "SubnetBPrivate"},
                "NetworkAclId": {"Ref": "NetworkAclPrivate"}
            }
        },
        "NetworkAclEntryInPublicAllowAll": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {"Ref": "NetworkAclPublic"},
                "RuleNumber": "99",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "NetworkAclEntryOutPublicAllowAll": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {"Ref": "NetworkAclPublic"},
                "RuleNumber": "99",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "NetworkAclEntryInPrivateAllowVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {"Ref": "NetworkAclPrivate"},
                "RuleNumber": "99",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "NetworkAclEntryOutPrivateAllowVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {"Ref": "NetworkAclPrivate"},
                "RuleNumber": "99",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        }
    },
    "Outputs": {
        "VPC": {
            "Description": "VPC.",
            "Value": {"Ref": "VPC"}
        },
        "SubnetAPublic": {
            "Description": "Subnet A public.",
            "Value": {"Ref": "SubnetAPublic"}
        },
        "SubnetAPrivate": {
            "Description": "Subnet A private.",
            "Value": {"Ref": "SubnetAPrivate"}
        },
        "SubnetBPublic": {
            "Description": "Subnet B public.",
            "Value": {"Ref": "SubnetBPublic"}
        },
        "SubnetBPrivate": {
            "Description": "Subnet B private.",
            "Value": {"Ref": "SubnetBPrivate"}
        },
        "RouteTablePrivateA": {
            "Description": "Route table private.",
            "Value": {"Ref": "RouteTablePrivateA"}
        },
        "RouteTablePrivateB": {
            "Description": "Route table private.",
            "Value": {"Ref": "RouteTablePrivateB"}
        },
        "RouteTablePublic": {
            "Description": "Route table public.",
            "Value": {"Ref": "RouteTablePublic"}
        },
        "DBInstanceAddress": {
            "Description": "PostgreSQL RDS instance IP",
            "Value": {"Fn::GetAtt": ["DBInstance", "Endpoint.Address"]}
        },
        "DBInstancePort": {
            "Description": "PostgreSQL port",
            "Value": {"Fn::GetAtt": ["DBInstance", "Endpoint.Port"]}
        }
    }
}
